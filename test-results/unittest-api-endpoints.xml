<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="29" time="0.108" timestamp="2025-08-07T12:25:53.459353-04:00" hostname="Mac.lan"><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_connection_error_handling" time="0.018" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_timeout_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_http_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_json_decode_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_invalid_url_error_handling" time="0.000"><failure message="Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'TypeError'&gt;, &lt;class 'test_error_handling.SecurityError'&gt;)">tests/unit/test_error_handling.py:93: in test_invalid_url_error_handling
    with pytest.raises((ValueError, TypeError, SecurityError)):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE any of (&lt;class 'ValueError'&gt;, &lt;class 'TypeError'&gt;, &lt;class 'test_error_handling.SecurityError'&gt;)</failure></testcase><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_microservice_unavailable_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_malformed_response_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_rate_limit_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_youtube_api_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_memory_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_disk_space_error_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_network_interruption_handling" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_concurrent_request_error_handling" time="0.002" /><testcase classname="unit.test_error_handling.TestErrorHandling" name="test_graceful_degradation_when_service_down" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorResponseFormats" name="test_error_response_structure" time="0.000" /><testcase classname="unit.test_error_handling.TestErrorResponseFormats" name="test_error_message_sanitization" time="0.000"><failure message="AssertionError: assert 'postgresql://' not in 'Database connection string: postgresql://[REDACTED]'&#10;  &#10;  'postgresql://' is contained here:&#10;    Database connection string: postgresql://[REDACTED]&#10;  ?                             +++++++++++++">tests/unit/test_error_handling.py:287: in test_error_message_sanitization
    assert "postgresql://" not in sanitized
E   AssertionError: assert 'postgresql://' not in 'Database connection string: postgresql://[REDACTED]'
E     
E     'postgresql://' is contained here:
E       Database connection string: postgresql://[REDACTED]
E     ?                             +++++++++++++</failure></testcase><testcase classname="unit.test_error_handling.TestErrorResponseFormats" name="test_error_logging_no_sensitive_data" time="0.000"><failure message="AssertionError: assert 'sk****' == 'sk-****'&#10;  &#10;  #x1B[0m#x1B[91m- sk-****#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?   -#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ sk****#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_error_handling.py:303: in test_error_logging_no_sensitive_data
    assert sanitized_log["api_key"] == "sk-****"
E   AssertionError: assert 'sk****' == 'sk-****'
E     
E     #x1B[0m#x1B[91m- sk-****#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?   -#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ sk****#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_valid_youtube_urls_are_accepted" time="0.000" /><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_invalid_youtube_urls_are_rejected" time="0.000" /><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_rick_roll_url_is_valid" time="0.000" /><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_url_extraction_from_various_formats" time="0.000" /><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_url_sanitization" time="0.000" /><testcase classname="unit.test_url_validation.TestYouTubeURLValidation" name="test_url_normalization" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_make_youtube_request_success" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_make_youtube_request_retry_logic" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_make_youtube_request_all_retries_fail" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_make_youtube_request_timeout_handling" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_is_youtube_service_healthy_success" time="0.000" /><testcase classname="unit.test_url_validation.TestMakeYouTubeRequest" name="test_is_youtube_service_healthy_failure" time="0.000" /></testsuite></testsuites>