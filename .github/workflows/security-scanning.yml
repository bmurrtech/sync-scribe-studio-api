# Security Scanning Workflow
# Comprehensive security analysis for Python and Node.js dependencies
# Includes CodeQL analysis, dependency review, and vulnerability scanning

name: Security Scanning & Vulnerability Management

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Run security scans daily at 2 AM PST
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - deep
      notify_security_team:
        description: 'Notify security team of results'
        required: false
        default: true
        type: boolean

env:
  # Security scanning configuration
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  SECURITY_LEVEL: ${{ github.event.inputs.scan_level || 'comprehensive' }}
  
permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Dependency Review - Checks for vulnerable dependencies in PRs
  dependency-review:
    name: Dependency Vulnerability Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: '.github/dependency-review-config.yml'
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC
          comment-summary-in-pr: always

  # CodeQL Analysis - Static code analysis for security vulnerabilities
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: .github/codeql/codeql-config.yml
          queries: +security-and-quality
          
      - name: Setup Python for CodeQL
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Node.js for CodeQL
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/youtube-downloader/package-lock.json

      - name: Install Node.js dependencies
        if: matrix.language == 'javascript'
        run: |
          cd services/youtube-downloader
          npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          output: sarif-results
          upload: failure-only

      - name: Upload CodeQL results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: sarif-results/${{ matrix.language }}.sarif

  # Python Security Scanning
  python-security-scan:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install security scanning tools
          pip install safety bandit pip-audit semgrep

      - name: Run Safety check (known vulnerabilities)
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report || true
        continue-on-error: true

      - name: Run pip-audit (dependency vulnerabilities)
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx-json --output=sbom.json || true
          pip-audit || true
        continue-on-error: true

      - name: Run Bandit (security linter)
        run: |
          bandit -r . -ll -f json -o bandit-report.json || true
          bandit -r . -ll || true
        continue-on-error: true

      - name: Run Semgrep (SAST)
        if: env.SECURITY_LEVEL == 'comprehensive' || env.SECURITY_LEVEL == 'deep'
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto . || true
        continue-on-error: true

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            sbom.json
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  # Node.js Security Scanning
  nodejs-security-scan:
    name: Node.js Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/youtube-downloader/package-lock.json

      - name: Install dependencies
        run: |
          cd services/youtube-downloader
          npm ci

      - name: Run npm audit
        run: |
          cd services/youtube-downloader
          npm audit --audit-level=low --json > npm-audit-report.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: Run Snyk security scan
        if: env.SECURITY_LEVEL != 'quick'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: |
            --file=services/youtube-downloader/package.json
            --severity-threshold=medium
            --json-file-output=snyk-report.json
            --sarif-file-output=snyk-results.sarif
        continue-on-error: true

      - name: Upload Snyk results to GitHub Code Scanning
        if: always() && env.SECURITY_LEVEL != 'quick'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results.sarif

      - name: Run ESLint security rules
        run: |
          cd services/youtube-downloader
          npx eslint . --ext .js --format json --output-file eslint-security-report.json || true
          npx eslint . --ext .js || true
        continue-on-error: true

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nodejs-security-reports
          path: |
            services/youtube-downloader/npm-audit-report.json
            snyk-report.json
            services/youtube-downloader/eslint-security-report.json
          retention-days: 30

  # Container Security Scanning
  container-security-scan:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || env.SECURITY_LEVEL == 'deep'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images for scanning
        run: |
          # Build main API image
          docker build -t sync-scribe-api:latest .
          
          # Build YouTube downloader image
          docker build -t youtube-downloader:latest ./services/youtube-downloader

      - name: Run Trivy security scanner on main API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sync-scribe-api:latest
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Run Trivy security scanner on YouTube downloader
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: youtube-downloader:latest
          format: 'sarif'
          output: 'trivy-downloader-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'

  # Secret Scanning
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Security Summary and Notification
  security-summary:
    name: Security Summary & Notifications
    runs-on: ubuntu-latest
    needs: [dependency-review, codeql-analysis, python-security-scan, nodejs-security-scan, container-security-scan, secret-scanning]
    if: always()
    steps:
      - name: Download security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# 🛡️ Security Scan Summary" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results Overview" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job statuses
          echo "| Component | Status | Details |" >> security-summary.md
          echo "|-----------|---------|---------|" >> security-summary.md
          
          CODEQL_STATUS="${{ needs.codeql-analysis.result }}"
          PYTHON_STATUS="${{ needs.python-security-scan.result }}"
          NODEJS_STATUS="${{ needs.nodejs-security-scan.result }}"
          CONTAINER_STATUS="${{ needs.container-security-scan.result }}"
          SECRET_STATUS="${{ needs.secret-scanning.result }}"
          
          echo "| CodeQL Analysis | $CODEQL_STATUS | Static code analysis |" >> security-summary.md
          echo "| Python Security | $PYTHON_STATUS | Dependency & code scanning |" >> security-summary.md
          echo "| Node.js Security | $NODEJS_STATUS | NPM audit & Snyk scanning |" >> security-summary.md
          echo "| Container Security | $CONTAINER_STATUS | Docker image vulnerability scan |" >> security-summary.md
          echo "| Secret Detection | $SECRET_STATUS | Credential leak detection |" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "## 📊 Key Metrics" >> security-summary.md
          echo "- Scan Level: ${{ env.SECURITY_LEVEL }}" >> security-summary.md
          echo "- Triggered by: ${{ github.event_name }}" >> security-summary.md
          echo "- Branch: ${{ github.ref_name }}" >> security-summary.md
          echo "- Commit: ${{ github.sha }}" >> security-summary.md
          
          cat security-summary.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Notify security team on critical findings
        if: ${{ (failure() || needs.codeql-analysis.result == 'failure') && github.event.inputs.notify_security_team == 'true' }}
        run: |
          echo "🚨 CRITICAL: Security vulnerabilities detected!"
          echo "Please review the security scan results immediately."
          # Add notification logic (Slack, email, etc.)

  # Create security badge
  security-badge:
    name: Update Security Badge
    runs-on: ubuntu-latest
    needs: security-summary
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create security status badge
        run: |
          # Logic to create/update security badge based on scan results
          echo "Security badge creation logic would go here"
